package com.melvinbur.archmagica.core.block;


import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;

import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;


import net.minecraft.world.level.block.RenderShape;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;

import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Mirror;

import net.minecraft.world.level.block.Rotation;



import java.util.stream.Stream;






public class WitchOvenBlock extends Block {
    public static final DirectionProperty FACING = BlockStateProperties.HORIZONTAL_FACING;




    public WitchOvenBlock(Properties properties) {
        super(properties);
        this.registerDefaultState(this.getStateDefinition().any().setValue(FACING, Direction.NORTH));



    }


    private static final VoxelShape SHAPE_N = Stream.of(
            Block.box(0.8000000000000007, 2, 0.5, 14.8, 2.45, 14.5),
            Block.box(13, 0.025, 12.8, 13.9, 2.025, 13.5),
            Block.box(13.1, 0.025, 1.799999999999999, 14, 2.025, 2.5),
            Block.box(13.1, 3.2, 0.875, 13.5, 11.2, 1.4000000000000004),
            Block.box(2.0999999999999996, 3.25, 0.875, 2.5, 11.2, 1.424999999999999),
            Block.box(11.45, 3.825, 0.875, 11.85, 10.45, 1.299999999999999),
            Block.box(2.2624999999999993, 10.4375, 0.875, 13.2375, 11.2125, 1.299999999999999),
            Block.box(2.2624999999999993, 3.2125, 0.875, 13.2375, 3.9875, 1.049999999999999),
            Block.box(9.6, 3.875, 0.875, 10.3, 10.45, 1.299999999999999),
            Block.box(8.25, 3.775, 0.875, 8.65, 10.75, 1.299999999999999),
            Block.box(6.6, 3.925, 0.875, 7.325000000000001, 10.725, 1.299999999999999),
            Block.box(4.949999999999999, 3.925, 0.875, 5.35, 10.6, 1.299999999999999),
            Block.box(3.5999999999999996, 3.85, 0.875, 4, 10.525, 1.299999999999999),
            Block.box(1.9000000000000004, 0.025, 1.799999999999999, 2.8000000000000007, 2.025, 2.5),
            Block.box(8.8, 13.325, 9.175, 9.1, 23.275, 9.475),
            Block.box(6.525, 13.325, 9.175, 6.824999999999999, 23.225, 9.475),
            Block.box(6.25, 23.175, 6.225, 9.425, 23.35, 9.7),
            Block.box(6.75, 23.375, 6.825000000000001, 8.925, 23.55, 9.2),
            Block.box(6.525, 13.325, 6.475, 6.824999999999999, 23.225, 6.775),
            Block.box(6.824999999999999, 13.325, 6.575000000000001, 8.825, 22.55, 6.700000000000001),
            Block.box(6.824999999999999, 13.325, 9.275, 8.825, 22.575, 9.4),
            Block.box(6.65, 13.325, 6.775, 6.775, 22.5, 9.175),
            Block.box(8.95, 13.325, 6.775, 9.075, 22.475, 9.175),
            Block.box(8.825, 13.325, 6.475, 9.125, 23.3, 6.775),
            Block.box(1.9000000000000004, 0.025, 12.6, 2.8000000000000007, 2.025, 13.3),
            Block.box(0.8000000000000007, 12.5, 0.5, 14.8, 12.95, 14.5),
            Block.box(1.9000000000000004, 13, 1.5999999999999996, 13.8, 13.35, 13.4),
            Block.box(1.5999999999999996, 2.5, 1.5, 14, 12.5, 13.825),
            Block.box(2.125, 3.575, 1.075000000000001, 13.25, 10.975, 1.200000000000001)
    ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    private static final VoxelShape SHAPE_W = Stream.of(
            Block.box(0.7124999999999986, 2, 1.1625000000000014, 14.712499999999999, 2.45, 15.162499999999998),
            Block.box(13.012500000000001, 0.02499999999999991, 2.0625000000000018, 13.7125, 2.025, 2.962500000000002),
            Block.box(2.0124999999999993, 0.02499999999999991, 1.9625000000000021, 2.7125000000000004, 2.025, 2.8625000000000025),
            Block.box(1.0874999999999986, 3.2, 2.462500000000002, 1.6124999999999972, 11.2, 2.8625000000000025),
            Block.box(1.0874999999999986, 3.25, 13.462499999999999, 1.6374999999999957, 11.2, 13.862499999999999),
            Block.box(1.0874999999999986, 3.825, 4.1125000000000025, 1.5124999999999957, 10.45, 4.512500000000003),
            Block.box(1.0874999999999986, 10.4375, 2.7250000000000014, 1.5124999999999957, 11.2125, 13.7),
            Block.box(1.0874999999999986, 3.2125000000000004, 2.7250000000000014, 1.2624999999999957, 3.9875000000000007, 13.7),
            Block.box(1.0874999999999986, 3.875, 5.662500000000001, 1.5124999999999957, 10.45, 6.3625000000000025),
            Block.box(1.0874999999999986, 3.7750000000000004, 7.312500000000002, 1.5124999999999957, 10.75, 7.712500000000002),
            Block.box(1.0874999999999986, 3.925, 8.637500000000001, 1.5124999999999957, 10.725, 9.362500000000002),
            Block.box(1.0874999999999986, 3.925, 10.612500000000002, 1.5124999999999957, 10.6, 11.012500000000003),
            Block.box(1.0874999999999986, 3.8499999999999996, 11.962499999999999, 1.5124999999999957, 10.525, 12.362499999999999),
            Block.box(2.0124999999999993, 0.02499999999999991, 13.162499999999998, 2.7125000000000004, 2.025, 14.062499999999998),
            Block.box(9.387500000000001, 13.325, 6.8625000000000025, 9.6875, 23.275, 7.162500000000001),
            Block.box(9.387500000000001, 13.325, 9.137500000000003, 9.6875, 23.225, 9.437500000000002),
            Block.box(6.4375, 23.175, 6.537500000000001, 9.9125, 23.35, 9.712500000000002),
            Block.box(7.037500000000001, 23.375, 7.037500000000001, 9.4125, 23.55, 9.212500000000002),
            Block.box(6.6875, 13.325, 9.137500000000003, 6.987500000000001, 23.225, 9.437500000000002),
            Block.box(6.787500000000001, 13.325, 7.137500000000003, 6.912500000000001, 22.55, 9.137500000000003),
            Block.box(9.4875, 13.325, 7.137500000000003, 9.6125, 22.575, 9.137500000000003),
            Block.box(6.987500000000001, 13.325, 9.187500000000002, 9.387500000000001, 22.5, 9.312500000000002),
            Block.box(6.987500000000001, 13.325, 6.887500000000003, 9.387500000000001, 22.475, 7.012500000000003),
            Block.box(6.6875, 13.325, 6.837500000000002, 6.987500000000001, 23.3, 7.137500000000003),
            Block.box(12.8125, 0.02499999999999991, 13.162499999999998, 13.512500000000001, 2.025, 14.062499999999998),
            Block.box(0.7124999999999986, 12.5, 1.1625000000000014, 14.712499999999999, 12.95, 15.162499999999998),
            Block.box(1.8125, 13, 2.1625000000000014, 13.6125, 13.35, 14.062499999999998),
            Block.box(1.7124999999999986, 2.5, 1.9625000000000021, 14.037499999999998, 12.5, 14.362499999999999),
            Block.box(1.2875000000000014, 3.575, 2.712500000000002, 1.4125000000000014, 10.975, 13.837499999999999)
    ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    private static final VoxelShape SHAPE_E = Stream.of(
            Block.box(1.2875000000000014, 2, 0.8375000000000021, 15.287500000000001, 2.45, 14.837499999999999),
            Block.box(2.2874999999999996, 0.02499999999999991, 13.037499999999998, 2.987499999999999, 2.025, 13.937499999999998),
            Block.box(13.2875, 0.02499999999999991, 13.137499999999998, 13.9875, 2.025, 14.037499999999998),
            Block.box(14.3875, 3.2, 13.137499999999998, 14.9125, 11.2, 13.537499999999998),
            Block.box(14.3625, 3.25, 2.137500000000001, 14.9125, 11.2, 2.5375000000000014),
            Block.box(14.4875, 3.825, 11.487499999999997, 14.9125, 10.45, 11.887499999999998),
            Block.box(14.4875, 10.4375, 2.3000000000000007, 14.9125, 11.2125, 13.274999999999999),
            Block.box(14.7375, 3.2125000000000004, 2.3000000000000007, 14.9125, 3.9875000000000007, 13.274999999999999),
            Block.box(14.4875, 3.875, 9.637499999999998, 14.9125, 10.45, 10.337499999999999),
            Block.box(14.4875, 3.7750000000000004, 8.287499999999998, 14.9125, 10.75, 8.687499999999998),
            Block.box(14.4875, 3.925, 6.6374999999999975, 14.9125, 10.725, 7.362499999999999),
            Block.box(14.4875, 3.925, 4.987499999999997, 14.9125, 10.6, 5.3874999999999975),
            Block.box(14.4875, 3.8499999999999996, 3.637500000000001, 14.9125, 10.525, 4.037500000000001),
            Block.box(13.2875, 0.02499999999999991, 1.9375000000000018, 13.9875, 2.025, 2.837500000000002),
            Block.box(6.3125, 13.325, 8.837499999999999, 6.612499999999999, 23.275, 9.137499999999998),
            Block.box(6.3125, 13.325, 6.562499999999998, 6.612499999999999, 23.225, 6.862499999999997),
            Block.box(6.0875, 23.175, 6.287499999999998, 9.5625, 23.35, 9.462499999999999),
            Block.box(6.5875, 23.375, 6.787499999999998, 8.962499999999999, 23.55, 8.962499999999999),
            Block.box(9.0125, 13.325, 6.562499999999998, 9.3125, 23.225, 6.862499999999997),
            Block.box(9.087499999999999, 13.325, 6.862499999999997, 9.212499999999999, 22.55, 8.862499999999997),
            Block.box(6.387499999999999, 13.325, 6.862499999999997, 6.512499999999999, 22.575, 8.862499999999997),
            Block.box(6.612499999999999, 13.325, 6.687499999999998, 9.0125, 22.5, 6.812499999999998),
            Block.box(6.612499999999999, 13.325, 8.987499999999997, 9.0125, 22.475, 9.112499999999997),
            Block.box(9.0125, 13.325, 8.862499999999997, 9.3125, 23.3, 9.162499999999998),
            Block.box(2.487499999999999, 0.02499999999999991, 1.9375000000000018, 3.1875, 2.025, 2.837500000000002),
            Block.box(1.2875000000000014, 12.5, 0.8375000000000021, 15.287500000000001, 12.95, 14.837499999999999),
            Block.box(2.3874999999999993, 13, 1.9375000000000018, 14.1875, 13.35, 13.837499999999999),
            Block.box(1.9625000000000004, 2.5, 1.637500000000001, 14.2875, 12.5, 14.037499999999998),
            Block.box(14.587499999999999, 3.575, 2.1625000000000014, 14.712499999999999, 10.975, 13.287499999999998)
    ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    private static final VoxelShape SHAPE_S = Stream.of(
            Block.box(1.1625000000000014, 2, 1.2875000000000014, 15.162499999999998, 2.45, 15.287500000000001),
            Block.box(2.0625000000000018, 0.02499999999999991, 2.2874999999999996, 2.962500000000002, 2.025, 2.987499999999999),
            Block.box(1.9625000000000021, 0.02499999999999991, 13.2875, 2.8625000000000025, 2.025, 13.9875),
            Block.box(2.462500000000002, 3.2, 14.387500000000003, 2.8625000000000025, 11.2, 14.912500000000001),
            Block.box(13.462499999999999, 3.25, 14.362500000000004, 13.862499999999999, 11.2, 14.912500000000001),
            Block.box(4.1125000000000025, 3.825, 14.487500000000004, 4.512500000000003, 10.45, 14.912500000000001),
            Block.box(2.7250000000000014, 10.4375, 14.487500000000004, 13.7, 11.2125, 14.912500000000001),
            Block.box(2.7250000000000014, 3.2125000000000004, 14.737500000000004, 13.7, 3.9875000000000007, 14.912500000000001),
            Block.box(5.662500000000001, 3.875, 14.487500000000004, 6.3625000000000025, 10.45, 14.912500000000001),
            Block.box(7.312500000000002, 3.7750000000000004, 14.487500000000004, 7.712500000000002, 10.75, 14.912500000000001),
            Block.box(8.637500000000001, 3.925, 14.487500000000004, 9.362500000000002, 10.725, 14.912500000000001),
            Block.box(10.612500000000002, 3.925, 14.487500000000004, 11.012500000000003, 10.6, 14.912500000000001),
            Block.box(11.962499999999999, 3.8499999999999996, 14.487500000000004, 12.362499999999999, 10.525, 14.912500000000001),
            Block.box(13.162499999999998, 0.02499999999999991, 13.2875, 14.062499999999998, 2.025, 13.9875),
            Block.box(6.8625000000000025, 13.325, 6.3125, 7.162500000000001, 23.275, 6.612499999999999),
            Block.box(9.137500000000003, 13.325, 6.3125, 9.437500000000002, 23.225, 6.612499999999999),
            Block.box(6.537500000000001, 23.175, 6.0875, 9.712500000000002, 23.35, 9.5625),
            Block.box(7.037500000000001, 23.375, 6.5875, 9.212500000000002, 23.55, 8.962499999999999),
            Block.box(9.137500000000003, 13.325, 9.0125, 9.437500000000002, 23.225, 9.3125),
            Block.box(7.137500000000003, 13.325, 9.087499999999999, 9.137500000000003, 22.55, 9.212499999999999),
            Block.box(7.137500000000003, 13.325, 6.387499999999999, 9.137500000000003, 22.575, 6.512499999999999),
            Block.box(9.187500000000002, 13.325, 6.612499999999999, 9.312500000000002, 22.5, 9.0125),
            Block.box(6.887500000000003, 13.325, 6.612499999999999, 7.012500000000003, 22.475, 9.0125),
            Block.box(6.837500000000002, 13.325, 9.0125, 7.137500000000003, 23.3, 9.3125),
            Block.box(13.162499999999998, 0.02499999999999991, 2.487499999999999, 14.062499999999998, 2.025, 3.1875),
            Block.box(1.1625000000000014, 12.5, 1.2875000000000014, 15.162499999999998, 12.95, 15.287500000000001),
            Block.box(2.1625000000000014, 13, 2.3874999999999993, 14.062499999999998, 13.35, 14.1875),
            Block.box(1.9625000000000021, 2.5, 1.9625000000000021, 14.362499999999999, 12.5, 14.287500000000001),
            Block.box(2.712500000000002, 3.575, 14.587499999999999, 13.837499999999999, 10.975, 14.712499999999999)
    ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();


    @Override
    public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
        switch (pState.getValue(FACING)) {
            case NORTH:
                return SHAPE_N;
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            case EAST:
                return SHAPE_E;
            default:
                return SHAPE_N;
        }
    }

    @Override
    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
        return defaultBlockState().setValue(FACING, ctx.getHorizontalDirection().getOpposite());
    }



    @Override
    public RenderShape getRenderShape(BlockState pState) {
        return RenderShape.MODEL;
    }



        @Override
        public BlockState rotate(BlockState pState, Rotation pRotation) {
            return pState.setValue(FACING, pRotation.rotate(pState.getValue(FACING)));
        }

        @Override
        public BlockState mirror(BlockState pState, Mirror pMirror) {
            return pState.rotate(pMirror.getRotation(pState.getValue(FACING)));
        }
        @Override
        protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> pBuilder) {
            pBuilder.add(FACING);
        }






}




















